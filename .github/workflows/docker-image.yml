name: Build & Deploy to EC2

on:
  push:
    branches: ["**"]   # רץ על כל בראנץ'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven (skip tests)
        run: mvn -B -ntp clean package -DskipTests

      # מייצרים BRANCH_SLUG ללא / כדי שיתאים ל-tag של Docker
      - name: Compute branch slug
        run: |
          echo "BRANCH_SLUG=${GITHUB_REF_NAME//\//-}" >> $GITHUB_ENV

      - name: Docker meta (tags & labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/calendergpt
          tags: |
            # tag לפי שם בראנץ' (מסונן) + latest
            type=raw,value=${{ env.BRANCH_SLUG }}-latest
            # tag נוסף לפי SHA מקוצר (נוח לדיבוג)
            type=sha,format=short,prefix=${{ env.BRANCH_SLUG }}-
            # 'latest' רק כשבודקים ל-main
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64      # חשוב ל-EC2 מבוסס x86_64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: SSH & deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail

            cd "${{ secrets.EC2_COMPOSE_DIR }}"

            # ודא שזו תיקיית הפרויקט עם docker-compose.yml
            if [ ! -f docker-compose.yml ]; then
              echo "ERROR: docker-compose.yml not found in $PWD"
              exit 1
            fi

            echo "==> כותב .env לקומפוז (image + סודות)"
            cat > .env << 'EOF'
            CALGPT_IMAGE_REPO=${{ secrets.DOCKERHUB_USERNAME }}/calendergpt
            CALGPT_IMAGE_TAG=${{ env.BRANCH_SLUG }}-latest

            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            EOF

            echo "==> כותב מפתחות JWT ל- /opt/calendargpt/keys"
            sudo install -d -m 700 /opt/calendargpt/keys
            sudo bash -lc 'cat > /opt/calendargpt/keys/private_key.pem << "EOF"
            ${{ secrets.JWT_PRIVATE_KEY_PEM }}
            EOF
            chmod 600 /opt/calendargpt/keys/private_key.pem'
            sudo bash -lc 'cat > /opt/calendargpt/keys/public_key.pem << "EOF"
            ${{ secrets.JWT_PUBLIC_KEY_PEM }}
            EOF
            chmod 644 /opt/calendargpt/keys/public_key.pem'

            echo "==> docker login (אם הריפו פרטי)"
            if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            fi

            echo "==> משיכה והרמה מחדש בכוח"
            docker compose pull server || true
            docker compose up -d --no-deps --force-recreate --pull always server

            echo "==> סטטוס לאחר הדיפלוי"
            docker compose images || true
            docker compose ps || true

            echo "==> בדיקת בריאות מקומית"
            curl -fsS http://127.0.0.1:8080/api/health || true
