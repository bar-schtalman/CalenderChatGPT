name: Build, Push & Deploy

on:
  push:
    branches:
      - '**'

env:
  IMAGE_NAME: barschtalman/calendergpt

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_sha_tag: ${{ steps.meta.outputs.sha_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Prepare JWT keys
        run: |
          mkdir -p keys
          printf '%s\n' "${{ secrets.JWT_PRIVATE_KEY_PEM }}" > keys/private_key.pem
          printf '%s\n' "${{ secrets.JWT_PUBLIC_KEY_PEM }}" > keys/public_key.pem
          chmod 600 keys/private_key.pem keys/public_key.pem

      - name: Build with Maven
        run: mvn -B clean install -DskipTests

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Compute tags
        id: meta
        run: echo "sha_tag=${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e

            IMAGE_NAME="${{ env.IMAGE_NAME }}"
            IMAGE_TAG="${{ needs.build-and-push.outputs.image_sha_tag }}"
            COMPOSE_DIR="${{ secrets.EC2_COMPOSE_DIR }}"

            echo "Deploying ${IMAGE_NAME}:${IMAGE_TAG} in ${COMPOSE_DIR}"
            cd "$COMPOSE_DIR"

            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              DC="docker compose"
            fi

            if grep -qE "image:\s*${IMAGE_NAME}:" docker-compose.yml; then
              sed -i "s|image:\s*${IMAGE_NAME}:.*|image: ${IMAGE_NAME}:${IMAGE_TAG}|g" docker-compose.yml
            else
              sed -i "s|^\(\s*appserver:\)|\1\n    image: ${IMAGE_NAME}:${IMAGE_TAG}|g" docker-compose.yml
            fi

            $DC pull appserver
            $DC up -d appserver

            docker image prune -af || true
