name: Build, Push & Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: barschtalman/calendergpt
  IMAGE_TAG_SHA: ${{ github.sha }}
  IMAGE_TAG_VER: v1.${{ github.run_number }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Build JAR (ללא טסטים כדי לא להיתקע על מפתחות/CI)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Build JAR with Maven (skip tests)
        run: mvn -B clean install -DskipTests

      # Docker login + build + push (3 טאגים: SHA, גרסה מונה, latest)
      - name: Docker login (Docker Hub)
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t "${IMAGE_NAME}:${IMAGE_TAG_SHA}" .
          docker tag "${IMAGE_NAME}:${IMAGE_TAG_SHA}" "${IMAGE_NAME}:${IMAGE_TAG_VER}"
          docker tag "${IMAGE_NAME}:${IMAGE_TAG_SHA}" "${IMAGE_NAME}:latest"

      - name: Push Docker image
        run: |
          docker push "${IMAGE_NAME}:${IMAGE_TAG_SHA}"
          docker push "${IMAGE_NAME}:${IMAGE_TAG_VER}"
          docker push "${IMAGE_NAME}:latest"

      # Deploy ל-EC2 דרך SSH
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG_VER: ${{ env.IMAGE_TAG_VER }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}     # למשל ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}       # תוכן ה-PEM
          port: 22
          script_stop: true
          envs: IMAGE_NAME,IMAGE_TAG_VER
          script: |
            set -euo pipefail
            set -x

            COMPOSE_DIR="$(printf '%s' "${{ secrets.EC2_COMPOSE_DIR }}" | tr -d '\r\n' | sed -e 's/[[:space:]]*$//')"

            echo "Deploying ${IMAGE_NAME}:${IMAGE_TAG_VER} in ${COMPOSE_DIR}"
            cd "$COMPOSE_DIR" || { echo "Invalid COMPOSE_DIR: $COMPOSE_DIR"; exit 1; }

            # בודק docker compose / docker-compose
            if command -v docker compose >/dev/null 2>&1; then
              DC="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "ERROR: docker compose/docker-compose not installed."
              exit 1
            fi

            # עדכון image בשירות appserver
            if grep -qE "image:\s*${IMAGE_NAME}:" docker-compose.yml; then
              sed -i "s|image:\s*${IMAGE_NAME}:.*|image: ${IMAGE_NAME}:${IMAGE_TAG_VER}|g" docker-compose.yml
            else
              sed -i "s|^\(\s*appserver:\)|\1\n    image: ${IMAGE_NAME}:${IMAGE_TAG_VER}|g" docker-compose.yml
            fi

            $DC pull appserver
            $DC up -d appserver

            docker image prune -af || true
