name: Build, Push & Deploy to EC2

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

env:
  IMAGE_NAME: barschtalman/calendergpt
  IMAGE_TAG_SHA: ${{ github.sha }}
  IMAGE_TAG_VER: v1.${{ github.run_number }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Build JAR (ללא טסטים כדי לא להיתקע על מפתחות/CI)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Build JAR with Maven (skip tests)
        run: mvn -B clean install -DskipTests

      # Docker login + build + push (3 טאגים: SHA, גרסה רצה, latest)
      - name: Docker login (Docker Hub)
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG_SHA: ${{ env.IMAGE_TAG_SHA }}
          IMAGE_TAG_VER: ${{ env.IMAGE_TAG_VER }}
        run: |
          set -euo pipefail
          docker build -t "${IMAGE_NAME}:${IMAGE_TAG_SHA}" .
          docker tag "${IMAGE_NAME}:${IMAGE_TAG_SHA}" "${IMAGE_NAME}:${IMAGE_TAG_VER}"
          docker tag "${IMAGE_NAME}:${IMAGE_TAG_SHA}" "${IMAGE_NAME}:latest"

      - name: Push Docker image
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG_SHA: ${{ env.IMAGE_TAG_SHA }}
          IMAGE_TAG_VER: ${{ env.IMAGE_TAG_VER }}
        run: |
          set -euo pipefail
          docker push "${IMAGE_NAME}:${IMAGE_TAG_SHA}"
          docker push "${IMAGE_NAME}:${IMAGE_TAG_VER}"
          docker push "${IMAGE_NAME}:latest"

      # (אופציונלי) העתקת docker-compose.yml לשרת אם הוא לא קיים שם/רוצים לעדכן מהrepo
      # - name: Copy compose to EC2
      #   uses: appleboy/scp-action@v0.1.7
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.SSH_KEY }}
      #     source: "docker-compose.yml"
      #     target: ${{ secrets.EC2_COMPOSE_DIR }}

      # Deploy ל-EC2 דרך SSH (יוצר .env, מעדכן תמונה, מריץ compose)
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          IMAGE_TAG_VER: ${{ env.IMAGE_TAG_VER }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}   # למשל ec2-user
          key: ${{ secrets.SSH_KEY }}         # תוכן ה-PEM (כ-Secret)
          port: 22
          script_stop: true
          envs: IMAGE_NAME,IMAGE_TAG_VER
          script: |
            set -euo pipefail
            set -x

            COMPOSE_DIR="$(printf '%s' "${{ secrets.EC2_COMPOSE_DIR }}" | tr -d '\r\n' | sed -e 's/[[:space:]]*$//')"
            if [ -z "$COMPOSE_DIR" ]; then
              echo "ERROR: EC2_COMPOSE_DIR secret is empty"; exit 1
            fi
            cd "$COMPOSE_DIR" || { echo "Invalid COMPOSE_DIR: $COMPOSE_DIR"; exit 1; }

            # בדיקה שה-compose קיים
            test -f docker-compose.yml || { echo "docker-compose.yml not found in $COMPOSE_DIR"; exit 1; }

            # כותבים/מעדכנים .env (בשרת בלבד; compose יטען אוטומטית)
            umask 077
            cat > .env << 'EOF'
OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
# אופציונלי: אזור זמן ל-Java/קונטיינר
TZ=Asia/Jerusalem
EOF

            # בודק docker compose / docker-compose
            if command -v docker compose >/dev/null 2>&1; then
              DC="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "ERROR: docker compose/docker-compose not installed."
              exit 1
            fi

            # מוודא שהשירות appserver מצביע לתגית החדשה
            if grep -qE "image:\s*${IMAGE_NAME}:" docker-compose.yml; then
              sed -i "s|image:\s*${IMAGE_NAME}:.*|image: ${IMAGE_NAME}:${IMAGE_TAG_VER}|g" docker-compose.yml
            else
              # אם אין image בשירות, מוסיף אותו תחת appserver
              awk -v img="    image: ${IMAGE_NAME}:${IMAGE_TAG_VER}" '
                $0 ~ /^[[:space:]]*appserver:/ && ins==0 { print; print img; ins=1; next }1
              ' docker-compose.yml > docker-compose.yml.tmp && mv docker-compose.yml.tmp docker-compose.yml
            fi

            # מושך את האימג' המעודכן ומרים את השירות
            $DC pull appserver
            $DC up -d appserver

            # ניקוי תמונות ישנות
            docker image prune -af || true

            # הדפסה קצרה למעקב
            $DC ps
            $DC logs --since=5m appserver || true
